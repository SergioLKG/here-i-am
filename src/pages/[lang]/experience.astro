---
import Layout from "../../layouts/Layout.astro";
import { getExperiences } from "@/components/Experience";
import { Calendar, MapPin, Briefcase } from "lucide-react";

// Define supported languages as a type for better type safety
type SupportedLanguage = "en" | "es";

// Generate static paths for each supported language
export function getStaticPaths() {
  return [{ params: { lang: "en" } }, { params: { lang: "es" } }];
}

// Get language from URL params and validate it
const { lang } = Astro.params;
const validLang = (
  lang === "en" || lang === "es" ? lang : "en"
) as SupportedLanguage;

// Translations object with proper typing
const translations: Record<SupportedLanguage, Record<string, string>> = {
  en: {
    title: "Experience - Sergio Domínguez Pérez",
    description:
      "Professional experience of Sergio Domínguez Pérez, a Full-Stack Developer based in Madrid, Spain.",
    pageTitle: "Professional Experience",
    pageDescription: "My journey as a developer",
    skills: "Skills",
    responsibilities: "Responsibilities",
    education: "Education",
    languages: "Languages",
    english: "English",
    spanish: "Spanish",
    galician: "Galician",
    fluent: "Fluent",
    advanced: "Advanced",
    native: "Native",
    currentPosition: "Current Position",
  },
  es: {
    title: "Experiencia - Sergio Domínguez Pérez",
    description:
      "Experiencia profesional de Sergio Domínguez Pérez, Desarrollador Full-Stack ubicado en Madrid, España.",
    pageTitle: "Experiencia Profesional",
    pageDescription: "Mi trayectoria como desarrollador",
    skills: "Habilidades",
    responsibilities: "Responsabilidades",
    education: "Educación",
    languages: "Idiomas",
    english: "Inglés",
    spanish: "Español",
    galician: "Gallego",
    fluent: "Fluido",
    advanced: "Avanzado",
    native: "Nativo",
    currentPosition: "Puesto Actual",
  },
};

const t = translations[validLang];

// Get experiences data
const experiences = getExperiences();

// Education data with proper typing
interface EducationItem {
  degree: Record<SupportedLanguage, string>;
  institution: Record<SupportedLanguage, string>;
  period: Record<SupportedLanguage, string>;
}

const education: EducationItem[] = [
  {
    degree: {
      en: "Higher Vocational Training in Multiplatform Application Development",
      es: "Ciclo Formativo de Grado Superior, Desarrollo de Aplicaciones Multiplataforma",
    },
    institution: {
      en: "IES Virgen de la Paz",
      es: "IES Virgen de la Paz",
    },
    period: {
      en: "2022 - 2024",
      es: "2022 - 2024",
    },
  },
  {
    degree: {
      en: "Intermediate Vocational Training in Microcomputer Systems and Networks",
      es: "Ciclo Formativo de Grado Medio, Técnico en Sistemas Microinformáticos y Redes",
    },
    institution: {
      en: "IES Rosa Chacel",
      es: "IES Rosa Chacel",
    },
    period: {
      en: "2020 - 2022",
      es: "2020 - 2022",
    },
  },
];

// Language proficiency data with proper typing
interface LanguageProficiency {
  name: string;
  level: string;
  percentage: number;
}

const languages: Record<SupportedLanguage, LanguageProficiency[]> = {
  en: [
    { name: t.english, level: t.advanced, percentage: 70 },
    { name: t.spanish, level: t.native, percentage: 100 },
    { name: t.galician, level: t.native, percentage: 100 },
  ],
  es: [
    { name: t.english, level: t.advanced, percentage: 70 },
    { name: t.spanish, level: t.native, percentage: 100 },
    { name: t.galician, level: t.native, percentage: 100 },
  ],
};

export const prerender = true;
---

<Layout title={t.title} description={t.description} lang={validLang}>
  <main class="container px-4 md:px-6 py-12 md:py-24">
    <div
      class="flex flex-col items-center justify-center space-y-4 text-center mb-12"
    >
      <div class="space-y-2">
        <h1 class="text-3xl font-bold tracking-tighter sm:text-4xl md:text-5xl">
          {t.pageTitle}
        </h1>
        <p class="max-w-[900px] text-gray-500 dark:text-gray-400 md:text-xl">
          {t.pageDescription}
        </p>
      </div>
    </div>

    <section class="space-y-16" aria-label={t.pageTitle}>
      {
        experiences.map((exp, index) => (
          <div class="grid md:grid-cols-[1fr_2fr] gap-8 items-start">
            <div>
              <h2 class="text-2xl font-bold flex items-center gap-2">
                {exp.active && (
                  <span
                    class="inline-flex w-3 h-3 animate-pulse bg-green-500 rounded-full"
                    aria-label={t.currentPosition}
                    role="status"
                  />
                )}
                {exp.title[validLang]}
              </h2>
              <div class="flex flex-col gap-1 mt-2 text-gray-500 dark:text-gray-400">
                <div class="flex items-center gap-1">
                  <Briefcase className="w-4 h-4" aria-hidden="true" />
                  <span>{exp.company}</span>
                </div>
                <div class="flex items-center gap-1">
                  <MapPin className="w-4 h-4" aria-hidden="true" />
                  <span>{exp.location[validLang]}</span>
                </div>
                <div class="flex items-center gap-1">
                  <Calendar className="w-4 h-4" aria-hidden="true" />
                  <span>{exp.period[validLang]}</span>
                </div>
              </div>
            </div>

            <div class="space-y-6">
              <p class="text-gray-700 dark:text-gray-300">
                {exp.description[validLang]}
              </p>

              {exp.responsibilities[validLang].length > 0 && (
                <div>
                  <h3 class="font-medium mb-2">{t.responsibilities}:</h3>
                  <ul class="list-disc pl-5 space-y-1">
                    {exp.responsibilities[validLang].map((responsibility) => (
                      <li>{responsibility}</li>
                    ))}
                  </ul>
                </div>
              )}

              <div>
                <h3 class="font-medium mb-2">{t.skills}:</h3>
                <div class="flex flex-wrap gap-2">
                  {exp.skills.map((skill) => (
                    <span class="px-3 py-1 bg-gray-100 dark:bg-gray-800 rounded-full text-sm">
                      {skill}
                    </span>
                  ))}
                </div>
              </div>
            </div>
          </div>
        ))
      }
    </section>

    <div class="mt-16 grid md:grid-cols-2 gap-8">
      <section aria-labelledby="education-heading">
        <h2 id="education-heading" class="text-2xl font-bold mb-6">
          {t.education}
        </h2>
        <div class="space-y-6">
          {
            education.map((edu) => (
              <div class="bg-white dark:bg-gray-900 p-6 rounded-lg border border-gray-200 dark:border-gray-800 shadow-sm hover:shadow-md transition-shadow duration-300">
                <h3 class="font-bold text-lg">{edu.degree[validLang]}</h3>
                <div class="flex flex-col gap-1 mt-2 text-gray-500 dark:text-gray-400">
                  <div class="flex items-center gap-1">
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      class="h-4 w-4"
                      fill="none"
                      viewBox="0 0 24 24"
                      stroke="currentColor"
                      aria-hidden="true"
                    >
                      <path d="M12 14l9-5-9-5-9 5 9 5z" />
                      <path d="M12 14l6.16-3.422a12.083 12.083 0 01.665 6.479A11.952 11.952 0 0012 20.055a11.952 11.952 0 00-6.824-2.998 12.078 12.078 0 01.665-6.479L12 14z" />
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M12 14l9-5-9-5-9 5 9 5zm0 0l6.16-3.422a12.083 12.083 0 01.665 6.479A11.952 11.952 0 0012 20.055a11.952 11.952 0 00-6.824-2.998 12.078 12.078 0 01.665-6.479L12 14zm-4 6v-7.5l4-2.222"
                      />
                    </svg>
                    <span>{edu.institution[validLang]}</span>
                  </div>
                  <div class="flex items-center gap-1">
                    <Calendar className="w-4 h-4" aria-hidden="true" />
                    <span>{edu.period[validLang]}</span>
                  </div>
                </div>
              </div>
            ))
          }
        </div>
      </section>

      <section aria-labelledby="languages-heading">
        <h2 id="languages-heading" class="text-2xl font-bold mb-6">
          {t.languages}
        </h2>
        <div class="space-y-6">
          {
            languages[validLang].map((language) => (
              <div class="bg-white dark:bg-gray-900 p-6 rounded-lg border border-gray-200 dark:border-gray-800 shadow-sm hover:shadow-md transition-shadow duration-300">
                <h3 class="font-bold text-lg">{language.name}</h3>
                <div class="mt-2">
                  <div
                    class="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2.5 overflow-hidden"
                    role="progressbar"
                    aria-valuenow={language.percentage}
                    aria-valuemin="0"
                    aria-valuemax="100"
                  >
                    <div
                      class="bg-primary h-2.5 rounded-full transition-all duration-1000"
                      style={`width: ${language.percentage}%`}
                    ></div>
                  </div>
                  <p class="text-right text-sm mt-1 text-gray-500 dark:text-gray-400">
                    {language.level}
                  </p>
                </div>
              </div>
            ))
          }
        </div>
      </section>
    </div>
  </main>
</Layout>

<script>
  // Add animation to progress bars when they come into view
  document.addEventListener("DOMContentLoaded", () => {
    const progressBars = document.querySelectorAll(
      '[role="progressbar"] > div'
    );

    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            // Add a small delay for a nicer effect
            setTimeout(() => {
              entry.target.classList.add("animate-in");
            }, 200);
            observer.unobserve(entry.target);
          }
        });
      },
      { threshold: 0.2 }
    );

    progressBars.forEach((bar) => {
      // Start with width 0
      bar.style.width = "0%";
      observer.observe(bar);
    });
  });

  // Add class for animation
  document.addEventListener("astro:page-load", () => {
    const animatedElements = document.querySelectorAll(".animate-in");
    animatedElements.forEach((el) => {
      const targetWidth = el.getAttribute("data-width") || "0%";
      el.style.width = targetWidth;
    });
  });
</script>

<style>
  /* Animation for progress bars */
  [role="progressbar"] > div {
    transition: width 1s ease-out;
  }

  /* Add subtle hover effect to experience cards */
  .animate-in {
    animation: fadeIn 0.5s ease-out forwards;
  }

  @keyframes fadeIn {
    from {
      opacity: 0.7;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style>
